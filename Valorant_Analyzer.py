# -*- coding: utf-8 -*-
"""ValoD_P1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13m6UmCZpyT4e6sR5jCTUAweTt5VuPXOz
"""

import streamlit as st
import requests
import pandas as pd
import altair as alt
from dotenv import load_dotenv
import os

# --- API Key and Headers ---
load_dotenv()  #  This will load variables from your .env file
api_k = os.getenv("API_KEY") #  Replace this with your HenrikDev API Key
headers = {"Authorization": api_k}

# --- Helper Fetch Functions ---
def get_json(url):
    """Helper function to safely make a GET request and return JSON."""
    try:
        response = requests.get(url, headers=headers, timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"Error: Received status code {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}")
        return None

def fetch_puuid(name, tag):
    """Fetch PUUID based on Riot name and tag."""
    url = f"https://api.henrikdev.xyz/valorant/v1/account/{name}/{tag}"
    data = get_json(url)
    if data and 'data' in data:
        return data['data']['puuid']
    return None

def fetch_affinity(puuid):
    """Fetch Region (Affinity) based on PUUID."""
    url = f"https://api.henrikdev.xyz/valorant/v1/by-puuid/account/{puuid}"
    data = get_json(url)
    if data and 'data' in data:
        return data['data']['region']
    return None

def fetch_total_matches(affinity, puuid):
    """Fetch Total Matches played in competitive mode."""
    url = f"https://api.henrikdev.xyz/valorant/v1/by-puuid/lifetime/matches/{affinity}/{puuid}?mode=competitive"
    return get_json(url)

def fetch_player_rank(region, name, tag):
    """Fetch Player's Current Rank, RR Points, and Rank Badge Image."""
    url = f"https://api.henrikdev.xyz/valorant/v2/mmr/{region}/{name}/{tag}"
    data = get_json(url)
    if data and 'data' in data:
        current_data = data['data'].get('current_data', {})
        if current_data:
            rank = current_data.get('currenttierpatched', None)
            rr_points = current_data.get('ranking_in_tier', None)
            images = current_data.get('images', {})
            rank_image = images.get('small', None)
            return rank, rr_points, rank_image
    return None, None, None

# --- Styling Functions ---
def color_result(val):
    """Color Wins in Green, Losses in Red."""
    if val == "Win":
        return 'color: green; font-weight: bold'
    elif val == "Loss":
        return 'color: red; font-weight: bold'
    else:
        return ''

def highlight_best_kd(s):
    """Highlight the highest K/D ratio match in yellow."""
    is_max = s == s.max()
    return ['background-color: yellow; font-weight: bold' if v else '' for v in is_max]

# --- Streamlit App Starts ---
st.title("Valorant Match Analyzer")

# Initialize Session State
for key in ['puuid', 'affinity', 'total_matches', 'rank', 'rr_points', 'rank_image']:
    if key not in st.session_state:
        st.session_state[key] = None

# --- Step 1: Get Player ID and Tag ---
name = st.text_input("Enter your Riot ID (without #):")
tag = st.text_input("Enter your Tagline:")

if st.button("Fetch Player Info"):
    if name and tag:
        if 3 <= len(tag) <= 5 and tag.isalnum():
            puuid = fetch_puuid(name, tag)
            if puuid:
                affinity = fetch_affinity(puuid)
                if affinity:
                    total_matches = fetch_total_matches(affinity, puuid)
                    rank, rr_points, rank_image = fetch_player_rank(affinity, name, tag)
                    if total_matches and 'results' in total_matches:
                        st.session_state.puuid = puuid
                        st.session_state.affinity = affinity
                        st.session_state.total_matches = total_matches
                        st.session_state.rank = rank
                        st.session_state.rr_points = rr_points
                        st.session_state.rank_image = rank_image
                        st.success(f"Fetched {total_matches['results']['total']} matches for player {name}!")

                        # --- Display Player Profile Card ---
                        st.markdown("---")
                        st.subheader("Player Profile")

                        card_col1, card_col2 = st.columns([1, 5])

                        with card_col1:
                            if st.session_state.rank_image:
                                st.image(st.session_state.rank_image, width=90)

                        with card_col2:
                            player_name = f"{name}#{tag}"
                            region = st.session_state.affinity.upper() if st.session_state.affinity else "N/A"
                            rank_display = st.session_state.rank if st.session_state.rank else "Unranked"
                            rr_display = f"({st.session_state.rr_points} RR)" if st.session_state.rr_points else ""

                            st.markdown(f"""
                                <div style='font-size:22px; font-weight:bold;'>{player_name}</div>
                                <div style='font-size:18px;'>ðŸŒŽ Region: {region}</div>
                                <div style='font-size:18px;'> Rank: {rank_display} {rr_display}</div>
                            """, unsafe_allow_html=True)

                    else:
                        st.error("Could not fetch matches.")
                else:
                    st.error("Could not fetch region.")
            else:
                st.error("Could not fetch account info.")
        else:
            st.warning("Tag must be 3-5 alphanumeric characters (no special symbols).")
    else:
        st.warning("Please enter both Riot ID and Tag.")

# --- Step 2: Select Number of Matches and Show Analysis ---
if st.session_state.puuid and st.session_state.affinity and st.session_state.total_matches:
    total_available_matches = st.session_state.total_matches['results']['total']

    num_matches = st.number_input(
        "How many recent matches do you want to analyze?",
        min_value=1,
        max_value=total_available_matches,
        value=min(5, total_available_matches),
        step=1
    )

    if st.button("Show Matches Overview"):
        recent_matches = st.session_state.total_matches['data'][:int(num_matches)]

        overview = []
        for match in recent_matches:
            map_name = match['meta']['map']['name']
            agent_played = match['stats']['character']['name']
            kills = match['stats']['kills']
            deaths = match['stats']['deaths']
            assists = match['stats']['assists']
            kd_ratio = round(kills / max(deaths, 1), 2)
            damage_made = match['stats']['damage']['made']
            damage_received = match['stats']['damage']['received']
            team = match['stats']['team'].lower()

            team_score = match['teams'][team]
            enemy_team_score = match['teams']['red'] if team == 'blue' else match['teams']['blue']
            result = "Win" if team_score > enemy_team_score else "Loss"

            overview.append({
                "Map": map_name,
                "Agent": agent_played,
                "Kills": kills,
                "Deaths": deaths,
                "Assists": assists,
                "K/D Ratio": kd_ratio,
                "Damage Made": damage_made,
                "Damage Received": damage_received,
                "Result": result
            })

        overview_df = pd.DataFrame(overview)
        overview_df.index = overview_df.index + 1  # Start numbering from 1

        # --- Show Table First ---
        st.subheader(f"Recent {int(num_matches)} Matches Overview")
        styled_df = (
            overview_df.style
            .applymap(color_result, subset=["Result"])
            .apply(highlight_best_kd, subset=["K/D Ratio"])
            .set_properties(**{
                'text-align': 'center',
                'font-size': '16px',
                'padding': '10px'
            })
        )
        st.dataframe(styled_df)

        # --- Charts Section ---
        st.markdown("---")
        st.subheader("Performance Overview")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### K/D Ratio Over Matches")
            kd_chart = alt.Chart(overview_df.reset_index()).mark_line(point=True).encode(
                x=alt.X('index:O', title='Match Number'),
                y=alt.Y('K/D Ratio:Q', title='K/D Ratio'),
                tooltip=['Map', 'Agent', 'Kills', 'Deaths', 'Assists', 'K/D Ratio']
            ).properties(width=350, height=350)
            st.altair_chart(kd_chart, use_container_width=True)

        with col2:
            st.markdown("### Kills per Match")
            kills_chart = alt.Chart(overview_df.reset_index()).mark_bar(color='orange').encode(
                x=alt.X('index:O', title='Match Number'),
                y=alt.Y('Kills:Q', title='Kills'),
                tooltip=['Map', 'Agent', 'Kills', 'Deaths', 'Assists']
            ).properties(width=350, height=350)
            st.altair_chart(kills_chart, use_container_width=True)

        # --- Summary Stats Section ---
        st.markdown("---")
        st.subheader("Summary Stats")

        total_matches_analyzed = len(overview_df)
        total_wins = (overview_df['Result'] == "Win").sum()
        win_rate = round((total_wins / total_matches_analyzed) * 100, 2)
        average_kills = round(overview_df['Kills'].mean(), 2)
        average_damage = round(overview_df['Damage Made'].mean(), 2)

        col1, col2, col3, col4, col5 = st.columns(5)
        col1.metric("Matches", total_matches_analyzed)
        col2.metric("Wins", total_wins)
        col3.metric("Win Rate", f"{win_rate}%")
        col4.metric("Avg Kills", average_kills)
        col5.metric("Avg Damage", average_damage)